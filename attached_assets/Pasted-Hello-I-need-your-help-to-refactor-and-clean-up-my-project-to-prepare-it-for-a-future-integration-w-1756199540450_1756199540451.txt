Hello! I need your help to refactor and clean up my project to prepare it for a future integration with the Capacitor framework. The goal is to make the existing PWA a robust, standard, and error-free application that runs perfectly on Vercel AND on my local Windows machine in VS Code.

The project is a React/Vite/Tailwind frontend with a Node.js/Express backend running as a serverless function on Vercel.

Please perform the following specific refactoring and cleanup tasks:

**1. Standardize Project Structure:**
Ensure the project follows a standard Vite + React structure. The `index.html`, `vite.config.ts`, `tailwind.config.js`, and `postcss.config.js` files must be in the project root. All frontend source code must be in the `/src` directory.

**2. Correct `vite.config.ts`:**
Review `vite.config.ts` and ensure the following settings are present for correct asset handling:
- `base: ''`
- `publicDir: 'public'`

**3. Correct `tailwind.config.js`:**
Review `tailwind.config.js`. The `content` paths must point to the root `index.html` and the `./src/**/*.{js,ts,jsx,tsx}` files.

**4. Fix Server-Side Module Imports:**
This is critical. Review ALL TypeScript files in the `/server` and `/api` directories.
- All path aliases (like `@shared/...`) MUST be replaced with relative paths (e.g., `../shared/...`).
- All relative imports of my own local files (`./...` or `../...`) MUST end with the `.js` extension to comply with Node.js ES Modules.

**5. Make Server-Side File Handling Environment-Aware (Vercel & Localhost):**
Review all backend code that handles file uploads (especially the `multer` configuration in `server/routes.ts`). The code must work on both Vercel and a local Windows development environment.
- When `process.env.NODE_ENV` is `'production'` (on Vercel), it must use the `/tmp` directory for temporary file storage.
- When in development (on localhost), it must use a local directory, for example, `path.join(process.cwd(), 'uploads')`.
Please implement this conditional logic to ensure the application is portable.

**6. Fix Backend Logic for Cloud Files:**
Review the logic for processing files stored on Supabase (e.g., reading questions from an Excel template). The code must follow a "download first, then process" pattern. It must first download the file from the Supabase URL to `/tmp` and then use `fs` to read that local temporary file.

**7. Fix Static Asset Paths:**
Review all React components and the `manifest.json` file.
- All references to static assets in the `/public` folder (like the Otis logo and PWA icons) must use root-relative paths (e.g., `<img src="/otis-logo.png">`).
- As a cleanup step, please rename the main logo file `otis-elevators-seeklogo_1753525178175.png` to a simpler name like `otis-logo.png` and update all references to it.

After completing these tasks, the project should be a clean, standard PWA that runs flawlessly on Vercel and locally, and is ready for Capacitor integration. Thank you!