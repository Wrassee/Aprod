import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { promises as fs } from 'fs'; // Aszinkron f√°jlrendszer modul import√°l√°sa
import path from 'path';

// K√∂rnyezeti v√°ltoz√≥k ellen≈ërz√©se
const supabaseUrl = process.env.VITE_SUPABASE_URL; // A VITE_ prefix a kliensoldal miatt kellhet, de szerveren is m≈±k√∂dik
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY; // A r√∂videbb, javasolt n√©v
const bucketName = process.env.SUPABASE_BUCKET;

if (!supabaseUrl || !supabaseServiceKey || !bucketName) {
  throw new Error('Missing Supabase configuration. Please check VITE_SUPABASE_URL, SUPABASE_SERVICE_KEY, and SUPABASE_BUCKET environment variables.');
}

// Supabase kliens inicializ√°l√°sa
const supabase: SupabaseClient = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

export class SupabaseStorageService {
  
  /**
   * F√°jl felt√∂lt√©se a Supabase Storage-be. Ha a bucket nem l√©tezik, megpr√≥b√°lja l√©trehozni.
   * @param filePath A felt√∂ltend≈ë helyi f√°jl el√©r√©si √∫tja.
   * @param storagePath A c√©l el√©r√©si √∫t a Supabase bucket-ben.
   * @returns A felt√∂lt√∂tt f√°jl publikus URL-je.
   */
  async uploadFile(filePath: string, storagePath: string): Promise<string> {
    try {
      console.log(`üì§ Uploading ${filePath} to ${bucketName}/${storagePath}`);
      
      const fileBuffer = await fs.readFile(filePath); // Aszinkron f√°jlolvas√°s
      
      const { error } = await supabase.storage
        .from(bucketName)
        .upload(storagePath, fileBuffer, {
          cacheControl: '3600',
          upsert: true, // Fel√ºl√≠rja a f√°jlt, ha m√°r l√©tezik
          contentType: this.getContentType(storagePath)
        });

      if (error) {
        // Specifikus hibaellen≈ërz√©s, ha a bucket nem l√©tezik
        if (error.message.includes('Bucket not found')) {
            console.warn(`Bucket "${bucketName}" not found. Attempting to create it...`);
            await this.createBucketIfNotExists();
            // √öjrapr√≥b√°lkoz√°s a felt√∂lt√©ssel a bucket l√©trehoz√°sa ut√°n
            return this.uploadFile(filePath, storagePath);
        }
        throw error; // M√°s hiba eset√©n dobja tov√°bb
      }

      const { data: { publicUrl } } = supabase.storage
        .from(bucketName)
        .getPublicUrl(storagePath);

      console.log(`‚úÖ File uploaded successfully: ${publicUrl}`);
      return publicUrl;
    } catch (error: any) {
      console.error(`‚ùå Upload failed for ${filePath}:`, error.message);
      throw new Error(`Failed to upload file: ${error.message}`);
    }
  }

  /**
   * F√°jl let√∂lt√©se a Supabase Storage-b≈ël √©s ment√©se egy helyi √∫tvonalra.
   * @param storagePath A let√∂ltend≈ë f√°jl el√©r√©si √∫tja a bucket-ben.
   * @param localPath A helyi √∫tvonal, ahova a f√°jlt menteni kell.
   */
  async downloadFile(storagePath: string, localPath: string): Promise<void> {
    try {
      console.log(`üì• Downloading ${storagePath} to ${localPath}`);
      const { data, error } = await supabase.storage
        .from(bucketName)
        .download(storagePath);

      if (error) {
        throw error; // Az eredeti, r√©szletesebb hibaobjektumot dobjuk tov√°bb
      }

      if (!data) {
        throw new Error('No data received from storage.');
      }

      const buffer = Buffer.from(await data.arrayBuffer());
      
      const dir = path.dirname(localPath);
      await fs.mkdir(dir, { recursive: true }); // Aszinkron mappa l√©trehoz√°s
      
      await fs.writeFile(localPath, buffer); // Aszinkron f√°jl√≠r√°s
      console.log(`‚úÖ File downloaded successfully to: ${localPath}`);
    } catch (error: any) {
      console.error(`‚ùå Download failed for ${storagePath}:`, error.message);
      // Itt az eredeti hibaobjektumot adjuk tov√°bb, ami t√∂bb inform√°ci√≥t tartalmazhat
      throw new Error(`Failed to download file: ${error.message || 'Unknown error'}`);
    }
  }

  /**
   * F√°jl t√∂rl√©se a Supabase Storage-b≈ël.
   * @param storagePath A t√∂rlend≈ë f√°jl el√©r√©si √∫tja.
   */
  async deleteFile(storagePath: string): Promise<void> {
    try {
      const { error } = await supabase.storage
        .from(bucketName)
        .remove([storagePath]);

      if (error) {
        throw error;
      }
      console.log(`‚úÖ File deleted successfully: ${storagePath}`);
    } catch (error: any) {
      console.error(`‚ùå Delete failed for ${storagePath}:`, error.message);
      throw new Error(`Failed to delete file: ${error.message}`);
    }
  }
  
  /**
   * Ellen≈ërzi, hogy egy bucket l√©tezik-e.
   * @returns Igaz, ha a bucket l√©tezik.
   */
  private async bucketExists(): Promise<boolean> {
    const { data, error } = await supabase.storage.getBucket(bucketName);
    return !error && !!data;
  }

  /**
   * L√©trehozza a konfigban megadott bucket-et, ha az m√©g nem l√©tezik.
   */
  async createBucketIfNotExists(): Promise<void> {
    if (await this.bucketExists()) {
        console.log(`Bucket "${bucketName}" already exists.`);
        return;
    }
    
    const { error } = await supabase.storage.createBucket(bucketName, {
      public: true, // Legyen publikus a k√∂nnyebb el√©r√©s √©rdek√©ben
      allowedMimeTypes: ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'image/*', 'application/pdf'],
    });

    if (error) {
      throw new Error(`Failed to create bucket "${bucketName}": ${error.message}`);
    }
    console.log(`‚úÖ Bucket "${bucketName}" created successfully.`);
  }

  /**
   * Tartalomt√≠pus meghat√°roz√°sa a f√°jln√©v kiterjeszt√©se alapj√°n.
   * @param fileName A f√°jl neve.
   * @returns A MIME t√≠pus.
   */
  private getContentType(fileName: string): string {
    const ext = path.extname(fileName).toLowerCase();
    const contentTypes: Record<string, string> = {
      '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      '.xls': 'application/vnd.ms-excel',
      '.pdf': 'application/pdf',
      '.png': 'image/png',
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
    };
    return contentTypes[ext] || 'application/octet-stream';
  }
}

// Singleton instance export√°l√°sa
export const supabaseStorage = new SupabaseStorageService();