// server/db.ts
// ------------------------------------------------------------
// 1Ô∏è‚É£ Imports ‚Äì mindegyik relat√≠v √∫tvonal .js‚Äëkiterjeszt√©ssel
// ------------------------------------------------------------
import { drizzle as drizzleSqlite } from "drizzle-orm/better-sqlite3";
import { drizzle as drizzleNeon } from "drizzle-orm/neon-serverless";
import { Pool, neonConfig } from "@neondatabase/serverless";
import Database from "better-sqlite3";
import ws from "ws";

import * as schema from "../shared/schema.js";

import path from "node:path";
import fs from "node:fs";

// ------------------------------------------------------------
// 2Ô∏è‚É£ DB t√≠pusdefin√≠ci√≥k
// ------------------------------------------------------------
type DbType = ReturnType<typeof drizzleSqlite> | ReturnType<typeof drizzleNeon>;

let db: DbType;
// a helyi v√°ltoz√≥ m√°s n√©ven, hogy ne √ºtk√∂zz√∂n az exporttal
let testConnectionFn: () => Promise<boolean>;

// ------------------------------------------------------------
// 3Ô∏è‚É£ Production ‚Äì Neon PostgreSQL (Render / Vercel / Railway)
// ------------------------------------------------------------
if (process.env.NODE_ENV === "production") {
  console.log("üîß Initializing Neon (PostgreSQL) connection ‚Äì production mode");

  if (!process.env.DATABASE_URL) {
    throw new Error(
      "DATABASE_URL environment variable is required in production."
    );
  }

  // Neon‚Äëdriver WebSocket‚Äëmegold√°s (Supabase‚Äëbar√°t)
  neonConfig.webSocketConstructor = ws;

  const pool = new Pool({ connectionString: process.env.DATABASE_URL });

  // Drizzle‚ÄëPostgres‚Äëadapter
  db = drizzleNeon(pool, { schema }) as DbType;

  // egyszer≈± ‚ÄúSELECT 1‚Äù health‚Äëcheck
  testConnectionFn = async () => {
    try {
      await pool.query("SELECT 1");
      console.log("‚úÖ Neon connection OK");
      return true;
    } catch (err) {
      console.error("‚ùå Neon connection failed:", err);
      return false;
    }
  };
}

// ------------------------------------------------------------
// 4Ô∏è‚É£ Development ‚Äì SQLite (local)
// ------------------------------------------------------------
else {
  console.log("üîß Initializing SQLite ‚Äì development mode");

  // adatb√°zis‚Äëf√°jl helye: <projectRoot>/data/otis_aprod.db
  const dbPath = path.join(process.cwd(), "data", "otis_aprod.db");
  const dataDir = path.dirname(dbPath);

  // biztos√≠tjuk, hogy a `data` mappa l√©tezik
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }

  const sqlite = new Database(dbPath);
  // write‚Äëahead‚Äëlogging ‚Äì a SQLite‚Äët gyorsabb√° √©s biztons√°gosabb√° teszi
  sqlite.pragma("journal_mode = WAL");

  // Drizzle‚ÄëSQLite‚Äëadapter
  db = drizzleSqlite(sqlite, { schema }) as DbType;

  // egyszer≈± ‚ÄúSELECT 1‚Äù health‚Äëcheck
  testConnectionFn = async () => {
    try {
      sqlite.prepare("SELECT 1").get();
      console.log("‚úÖ SQLite connection OK");
      return true;
    } catch (err) {
      console.error("‚ùå SQLite connection failed:", err);
      return false;
    }
  };
}

// ------------------------------------------------------------
// 5Ô∏è‚É£ Export√°l√°s ‚Äì a t√∂bbi modul k√∂nnyen import√°lhatja
// ------------------------------------------------------------
export { db };
// a v√°ltoz√≥ neve most m√°r **testConnection**, a bels≈ë v√°ltoz√≥ **testConnectionFn**
export const testConnection = testConnectionFn;