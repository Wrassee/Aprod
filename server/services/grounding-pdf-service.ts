// server/services/grounding-pdf-service.ts ‚Äì V√âGLEGES, HELYES BET≈∞BE√ÅGYAZ√ÅS (v9)

import { PDFDocument, PDFTextField, PDFButton } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import fs from 'fs';
import path from 'path';
import { groundingPdfMapping } from '../config/grounding-pdf-mapping.js';
import { GroundingAnswer, FormData } from '../../shared/types.js';

export class GroundingPdfService {
  static async generateFilledPdf(formData: FormData): Promise<Buffer> {
    console.log('--- FUT A V√âGLEGES, HELYES √âKEZETKEZEL≈ê K√ìD! v9 ---');

    // 1Ô∏è‚É£ PDF sablon bet√∂lt√©se
    const templatePath = path.resolve(process.cwd(), 'public/templates/Erdungskontrolle.pdf');
    const pdfBytes = fs.readFileSync(templatePath);
    const pdfDoc = await PDFDocument.load(pdfBytes);

    // 2Ô∏è‚É£ Fontkit regisztr√°l√°sa
    pdfDoc.registerFontkit(fontkit);

    // 3Ô∏è‚É£ Bet≈±t√≠pusok be√°gyaz√°sa
    const regularFontPath = path.resolve(process.cwd(), 'public/fonts/Roboto-Regular.ttf');
    const boldFontPath = path.resolve(process.cwd(), 'public/fonts/Roboto-Bold.ttf');

    const regularFontBytes = fs.readFileSync(regularFontPath);
    const boldFontBytes = fs.readFileSync(boldFontPath);

    const robotoFont = await pdfDoc.embedFont(regularFontBytes);
    const robotoBold = await pdfDoc.embedFont(boldFontBytes);

    const form = pdfDoc.getForm();

    // 4Ô∏è‚É£ Alapadatok kit√∂lt√©se
    for (const { appDataKey, pdfFieldName } of groundingPdfMapping.metadata) {
      const value = (formData as any)[appDataKey];
      if (!value) continue;

      if (appDataKey === 'signature' && typeof value === 'string' && value.startsWith('data:image/png;base64,')) {
        try {
          const pngImage = await pdfDoc.embedPng(value);
          const imageField = form.getField(pdfFieldName);
          if (imageField instanceof PDFButton) {
            (imageField as any).setImage(pngImage);
            console.log(`‚úÖ Signature image set for field: "${pdfFieldName}"`);
          }
        } catch (e) {
          console.warn(`‚ö†Ô∏è Hiba az al√°√≠r√°sk√©p beilleszt√©sekor a(z) '${pdfFieldName}' mez≈ëbe:`, e);
        }
      } else {
        try {
          const field = form.getTextField(pdfFieldName);
          field.setText(String(value));
          field.setFont(robotoFont);
          field.setFontSize(10);
        } catch {
          console.warn(`‚ö†Ô∏è Sz√∂veges mez≈ë nem tal√°lhat√≥ vagy nem kompatibilis: "${pdfFieldName}"`);
        }
      }
    }

    // 5Ô∏è‚É£ Egy√©ni sz√∂vegek be√≠r√°sa
    if (formData.customGroundingTexts) {
      console.log('üìù Processing custom texts...');
      for (const [pdfFieldName, textValue] of Object.entries(formData.customGroundingTexts)) {
        if (textValue && typeof textValue === 'string') {
          try {
            const field = form.getTextField(pdfFieldName);
            field.setText(textValue);
            field.setFont(robotoFont);
            field.setFontSize(10);
            console.log(`‚úÖ Custom text written to field "${pdfFieldName}"`);
          } catch {
            console.warn(`‚ö†Ô∏è Egy√©ni sz√∂vegmez≈ë nem tal√°lhat√≥: "${pdfFieldName}"`);
          }
        }
      }
    }

    // 6Ô∏è‚É£ F√∂ldel√©si k√©rd√©sek (OK / nicht OK / -) ‚Äì HELYES VERZI√ì
    const remarks: { punkt: string; bemerkung: string }[] = [];
groundingPdfMapping.answers.forEach(({ questionId, okFieldName, notOkFieldName }) => {
    const answer = formData.groundingCheckAnswers?.[questionId];
    if (!answer) return;

    try {
        if (answer === 'ok') {
            const field = form.getTextField(okFieldName);
            field.setText('X');
            // ‚úÖ JAV√çT√ÅS: Csak a bet≈±t√≠pust adjuk √°t, m√©ret n√©lk√ºl
            field.updateAppearances(robotoBold);
        } else if (answer === 'not_ok') {
            const field = form.getTextField(notOkFieldName);
            field.setText('X');
            // ‚úÖ JAV√çT√ÅS: Csak a bet≈±t√≠pust adjuk √°t, m√©ret n√©lk√ºl
            field.updateAppearances(robotoBold);

            const punkt = okFieldName.replace('OK', '');
            remarks.push({ punkt, bemerkung: `Hiba a ${punkt} pontn√°l.` });
        } else if (answer === 'not_applicable') {
            const field = form.getTextField(okFieldName);
            field.setText('-');
            // ‚úÖ JAV√çT√ÅS: Csak a bet≈±t√≠pust adjuk √°t, m√©ret n√©lk√ºl
            field.updateAppearances(robotoBold);
        }
    } catch (e) {
        console.warn(`‚ö†Ô∏è Hiba a(z) ${questionId} v√°lasz be√≠r√°sakor:`, e);
    }
});

    // 7Ô∏è‚É£ Bemerkung mez≈ëk kit√∂lt√©se ‚Äì HELYES VERZI√ì
    if (remarks.length >= 1) {
    try {
        const row1 = groundingPdfMapping.remarks[0];
        const punktField1 = form.getTextField(row1.punktField);
        const bemerkungField1 = form.getTextField(row1.bemerkungField);

        punktField1.setText(remarks[0].punkt);
        bemerkungField1.setText(remarks[0].bemerkung);

        // ‚úÖ JAV√çT√ÅS: Csak a bet≈±t√≠pust adjuk √°t, m√©ret n√©lk√ºl
        punktField1.updateAppearances(robotoBold);
        bemerkungField1.updateAppearances(robotoBold);
    } catch (e) {
        console.warn(`‚ö†Ô∏è Hiba a Bemerkung 1. sor be√≠r√°sakor:`, e);
    }
}

if (remarks.length >= 2) {
    try {
        const row2 = groundingPdfMapping.remarks[1];
        const punktField2 = form.getTextField(row2.punktField);
        const bemerkungField2 = form.getTextField(row2.bemerkungField);

        if (remarks.length > 2) {
            bemerkungField2.setText('A tov√°bbi hib√°kat keresd a k√∂z√∂s hibalist√°ban');
            punktField2.setText('');
        } else {
            punktField2.setText(remarks[1].punkt);
            bemerkungField2.setText(remarks[1].bemerkung);
        }

        // ‚úÖ JAV√çT√ÅS: Csak a bet≈±t√≠pust adjuk √°t, m√©ret n√©lk√ºl
        punktField2.updateAppearances(robotoBold);
        bemerkungField2.updateAppearances(robotoBold);
    } catch (e) {
        console.warn(`‚ö†Ô∏è Hiba a Bemerkung 2. sor be√≠r√°sakor:`, e);
    }
}

    // 8Ô∏è‚É£ PDF kilap√≠t√°sa √©s ment√©s
    form.flatten();
    const filledPdfBytes = await pdfDoc.save();
    return Buffer.from(filledPdfBytes);
  }
}
