// server/services/grounding-pdf-service.ts ‚Äì V√âGLEGES, DEPLOY-BIZTOS VERZI√ì (v10)

import { PDFDocument, PDFTextField, PDFButton } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import fs from 'fs';
import path from 'path';
import { groundingPdfMapping } from '../config/grounding-pdf-mapping.js';
import { GroundingAnswer, FormData } from '../../shared/types.js';

export class GroundingPdfService {
  static async generateFilledPdf(formData: FormData): Promise<Buffer> {
    console.log('--- FUT A DEPLOY-BIZTOS, VASTAG BET≈∞S VERZI√ì! v10 ---');

    // 1Ô∏è‚É£ PDF √©s bet≈±t√≠pusok el≈ëk√©sz√≠t√©se (Helyes sorrend)
    const templatePath = path.resolve(process.cwd(), 'public/templates/Erdungskontrolle.pdf');
    const pdfBytes = fs.readFileSync(templatePath);
    const pdfDoc = await PDFDocument.load(pdfBytes);
    
    pdfDoc.registerFontkit(fontkit);

    const regularFontPath = path.resolve(process.cwd(), 'public/fonts/Roboto-Regular.ttf');
    const boldFontPath = path.resolve(process.cwd(), 'public/fonts/Roboto-Bold.ttf');
    const regularFontBytes = fs.readFileSync(regularFontPath);
    const boldFontBytes = fs.readFileSync(boldFontPath);
    const robotoFont = await pdfDoc.embedFont(regularFontBytes);
    const robotoBold = await pdfDoc.embedFont(boldFontBytes);
    
    const form = pdfDoc.getForm();

    // 2Ô∏è‚É£ Alapadatok √©s egy√©ni sz√∂vegek kit√∂lt√©se
    // √ñsszegy≈±jtj√ºk az √∂sszes kit√∂ltend≈ë sz√∂veges mez≈ët
    const allTextFields: { [key: string]: string | undefined } = { ...formData.customGroundingTexts };
    groundingPdfMapping.metadata.forEach(meta => {
        if (meta.appDataKey !== 'signature' && (formData as any)[meta.appDataKey]) {
            allTextFields[meta.pdfFieldName] = (formData as any)[meta.appDataKey];
        }
    });

    // Ciklus a sz√∂veges mez≈ëk kit√∂lt√©s√©re a sima bet≈±t√≠pussal
    for (const [pdfFieldName, textValue] of Object.entries(allTextFields)) {
        if (textValue && typeof textValue === 'string') {
            try {
                const field = form.getTextField(pdfFieldName);
                field.setText(textValue);
                field.updateAppearances(robotoFont); // Sima bet≈±t√≠pus a fejl√©chez √©s egy√©ni sz√∂vegekhez
            } catch (e) {
                console.warn(`‚ö†Ô∏è Sz√∂veges mez≈ë nem tal√°lhat√≥ vagy nem kompatibilis: "${pdfFieldName}"`);
            }
        }
    }
    
    // 3Ô∏è‚É£ Al√°√≠r√°s beilleszt√©se (k√ºl√∂n kezelve)
    const signatureValue = formData.signature;
    if (signatureValue && typeof signatureValue === 'string' && signatureValue.startsWith('data:image/png;base64,')) {
        try {
            const pngImage = await pdfDoc.embedPng(signatureValue);
            const imageField = form.getButton('signature');
            imageField.setImage(pngImage);
            console.log('‚úÖ Signature image inserted');
        } catch(e) {
            console.warn(`‚ö†Ô∏è Hiba az al√°√≠r√°sk√©p beilleszt√©sekor:`, e);
        }
    }

    // 4Ô∏è‚É£ F√∂ldel√©si k√©rd√©sek (OK / nicht OK / -) - NYELVF√úGG≈ê HIBAKI√çR√ÅSSAL
    const remarks: { punkt: string; bemerkung: string }[] = [];
    groundingPdfMapping.answers.forEach(({ questionId, okFieldName, notOkFieldName }) => {
      const answer = formData.groundingCheckAnswers?.[questionId];
      if (!answer) return;

      try {
        if (answer === 'ok' || answer === 'not_ok' || answer === 'not_applicable') {
            const isNotOk = answer === 'not_ok';
            const fieldName = isNotOk ? notOkFieldName : okFieldName;
            const textToSet = answer === 'not_applicable' ? '-' : 'X';

            const field = form.getTextField(fieldName);
            field.setText(textToSet);
            // ‚úÖ A GARANT√ÅLTAN M≈∞K√ñD≈ê MET√ìDUS: Csak a VASTAG bet≈±t√≠pust adjuk √°t
            field.updateAppearances(robotoBold); 
            
            if (isNotOk) {
                const punkt = okFieldName.replace('OK', '');
                
                // --- √öJ LOGIKA: NYELVF√úGG≈ê HIBALE√çR√ÅS ---
                // 1. Keress√ºk meg a konkr√©t hib√°t a formData.errors t√∂mbben az aktu√°lis questionId alapj√°n
                const specificError = formData.errors?.find(err => (err as any).context === questionId);

                // 2. A hiba le√≠r√°sa a 'bemerkung' mez≈ëbe. Ha nem tal√°lunk konkr√©t hib√°t, egy √°ltal√°nos sz√∂veg lesz a tartal√©k.
                let bemerkungText = `Hiba a ${punkt} pontn√°l.`; // Alap√©rtelmezett, tartal√©k sz√∂veg
                if (specificError && specificError.description) {
                    bemerkungText = specificError.description; // Fel√ºl√≠rjuk a konkr√©t, nyelvf√ºgg≈ë le√≠r√°ssal
                }

                // 3. A remarks t√∂mbh√∂z m√°r a dinamikus sz√∂veget adjuk hozz√°
                remarks.push({ punkt, bemerkung: bemerkungText });
            }
        }
      } catch (e) { 
        console.warn(`‚ö†Ô∏è Hiba a(z) ${questionId} v√°lasz be√≠r√°sakor.`, e);
      }
    });

    // 5Ô∏è‚É£ Bemerkung mez≈ëk kit√∂lt√©se
    if (remarks.length >= 1) {
        try {
            const row1 = groundingPdfMapping.remarks[0];
            const punktField1 = form.getTextField(row1.punktField);
            punktField1.setText(remarks[0].punkt);
            punktField1.updateAppearances(robotoBold); // Legyen a hiba is vastag

            const bemerkungField1 = form.getTextField(row1.bemerkungField);
            bemerkungField1.setText(remarks[0].bemerkung);
            bemerkungField1.updateAppearances(robotoBold);
        } catch (e) { console.warn(`‚ö†Ô∏è Hiba a Bemerkung 1. sor be√≠r√°sakor.`); }
    }
    if (remarks.length >= 2) {
        try {
            const row2 = groundingPdfMapping.remarks[1];
            const punktField2 = form.getTextField(row2.punktField);
            const bemerkungField2 = form.getTextField(row2.bemerkungField);

            if (remarks.length > 2) {
                bemerkungField2.setText('A tov√°bbi hib√°kat keresd a k√∂z√∂s hibalist√°ban');
                punktField2.setText('');
            } else {
                punktField2.setText(remarks[1].punkt);
                bemerkungField2.setText(remarks[1].bemerkung);
            }
            punktField2.updateAppearances(robotoBold);
            bemerkungField2.updateAppearances(robotoBold);
        } catch (e) { console.warn(`‚ö†Ô∏è Hiba a Bemerkung 2. sor be√≠r√°sakor.`); }
    }
    
    // ====================================================================
    // ‚úÖ √öJ BLOKK: EREDM√âNY MEZ≈êK AUTOMATIKUS KIT√ñLT√âSE (EGYEDI LOGIK√ÅVAL)
    // ====================================================================
    try {
        console.log('üìä Eredm√©ny mez≈ëk ki√©rt√©kel√©se...');

        // Seg√©df√ºggv√©ny: van-e hiba egy adott csoportban
        const hasErrorInGroup = (groupPrefix: string) => {
            const questionsInGroup = groundingPdfMapping.answers.filter(
                q => q.questionId.startsWith(groupPrefix)
            );
            return questionsInGroup.some(
                question => formData.groundingCheckAnswers?.[question.questionId] === 'not_ok'
            );
        };

        // X1: Hiba van az OK1/ (Maschinenraum) csoportban
        const hasErrorInX1 = hasErrorInGroup('OK1/');
        if (hasErrorInX1) {
            console.log(`‚ùóÔ∏è Hiba √©szlelve az OK1/ csoportban. X1 mez≈ë bejel√∂l√©se.`);
            const field = form.getTextField('X1');
            field.setText('X');
            field.updateAppearances(robotoBold);
        }

        // X2: Hiba van az OK2/ - OK5/ B√ÅRMELYIK csoportban
        const hasErrorInX2 = hasErrorInGroup('OK2/') || 
                             hasErrorInGroup('OK3/') || 
                             hasErrorInGroup('OK4/') || 
                             hasErrorInGroup('OK5/');
        if (hasErrorInX2) {
            console.log(`‚ùóÔ∏è Hiba √©szlelve az OK2/-OK5/ csoportok valamelyik√©ben. X2 mez≈ë bejel√∂l√©se.`);
            const field = form.getTextField('X2');
            field.setText('X');
            field.updateAppearances(robotoBold);
        }

        // X3: Hiba van az OK1/ √âS (OK2/ - OK5/ valamelyik√©ben)
        const hasErrorInX3 = hasErrorInX1 && hasErrorInX2;
        if (hasErrorInX3) {
            console.log(`‚ùóÔ∏è Hiba √©szlelve az OK1/ √âS OK2/-OK5/ csoportokban. X3 mez≈ë bejel√∂l√©se.`);
            const field = form.getTextField('X3');
            field.setText('X');
            field.updateAppearances(robotoBold);
        }

        // X4: Hiba van B√ÅRMELYIK csoportban (OK1/ - OK5/)
        const hasErrorInX4 = hasErrorInGroup('OK1/') || 
                             hasErrorInGroup('OK2/') || 
                             hasErrorInGroup('OK3/') || 
                             hasErrorInGroup('OK4/') || 
                             hasErrorInGroup('OK5/');
        if (hasErrorInX4) {
            console.log(`‚ùóÔ∏è Hiba √©szlelve valamelyik csoportban. X4 mez≈ë bejel√∂l√©se.`);
            const field = form.getTextField('X4');
            field.setText('X');
            field.updateAppearances(robotoBold);
        }

        // X5: Nincs automatikus logika - k√©zi kit√∂lt√©sre hagyva
        console.log('‚ÑπÔ∏è X5 mez≈ë k√©zi kit√∂lt√©sre hagyva (ut√≥ellen≈ërz√©s).');

    } catch (e) {
        console.warn(`‚ö†Ô∏è Hiba t√∂rt√©nt az eredm√©ny mez≈ëk automatikus kit√∂lt√©se sor√°n.`, e);
    }
    
    // 6Ô∏è‚É£ V√©gleges√≠t√©s √©s ment√©s
    form.flatten();
    const filledPdfBytes = await pdfDoc.save();
    return Buffer.from(filledPdfBytes);
  }
}