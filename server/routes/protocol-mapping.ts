// server/routes/protocol-mapping.ts
import { Router } from 'express';
import multer from 'multer'; // ‚úÖ √öJ: FormData feldolgoz√°shoz
import { z } from 'zod';
import { supabaseStorage } from '../services/supabase-storage.js';
import { storage } from '../storage.js';
import { insertProtocolSchema } from '../../shared/schema.js';
import { pdfService } from '../services/pdf-service.js';
import { GroundingPdfService } from '../services/grounding-pdf-service.js';

const router = Router();
const upload = multer(); // ‚úÖ Multer inicializ√°l√°s FormData kezel√©shez

// PROTOKOLL L√âTREHOZ√ÅSA
router.post('/', async (req, res) => {
  try {
    const protocolData = insertProtocolSchema.parse(req.body);
    const protocol = await storage.createProtocol(protocolData);
    res.json(protocol);
  } catch (error) {
    console.error("Error creating protocol:", error);
    res.status(400).json({ message: "Invalid protocol data" });
  }
});

// EXCEL LET√ñLT√âS
router.post('/download-excel', async (req, res) => {
  try {
    console.log("Excel download request received");
    const { formData, language } = req.body;
    
    if (!formData) {
      return res.status(400).json({ message: "Form data is required" });
    }
    
    const { simpleXmlExcelService } = await import('../services/simple-xml-excel.js');
    
    console.log("Generating Excel with XML service...");
    const excelBuffer = await simpleXmlExcelService.generateExcelFromTemplate(formData, language || 'hu');

    if (!excelBuffer || excelBuffer.length < 1000) {
      throw new Error('Generated Excel buffer is invalid or too small');
    }

    const liftId = formData.answers && formData.answers['7'] ? 
                    String(formData.answers['7']).replace(/[^a-zA-Z0-9]/g, '_') : 
                    'Unknown';
    const filename = `OTIS_Protocol_${liftId}_${new Date().toISOString().split('T')[0]}.xlsx`;

    console.log(`Excel generated successfully: ${filename} (${excelBuffer.length} bytes)`);

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Content-Length', excelBuffer.length.toString());
    
    res.send(excelBuffer);

  } catch (error) {
    console.error("Error generating Excel download:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    res.status(500).json({ 
      message: "Failed to generate Excel file",
      error: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    });
  }
});

// PDF LET√ñLT√âS
router.post('/download-pdf', async (req, res) => {
  try {
    console.log("PDF download request received");
    const { formData, language } = req.body;
    if (!formData) return res.status(400).json({ message: "Form data is required" });

    // 1. El≈ësz√∂r legener√°ljuk az Excel f√°jlt ugyanazzal a logik√°val
    const { simpleXmlExcelService } = await import('../services/simple-xml-excel.js');
    const excelBuffer = await simpleXmlExcelService.generateExcelFromTemplate(formData, language || 'hu');

    // 2. Az Excel bufferb≈ël legener√°ljuk a PDF-et a jav√≠tott pdfService seg√≠ts√©g√©vel
    console.log("Generating PDF from Excel buffer...");
    const pdfBuffer = await pdfService.generatePDF(excelBuffer);

    const liftId = formData.answers?.['7'] ? String(formData.answers['7']).replace(/[^a-zA-Z0-9]/g, '_') : 'Unknown';
    const filename = `OTIS_Protocol_${liftId}_${new Date().toISOString().split('T')[0]}.pdf`;
    
    console.log(`PDF generated successfully: ${filename} (${pdfBuffer.length} bytes)`);

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send(pdfBuffer);

  } catch (error) {
    console.error("Error generating PDF download:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    res.status(500).json({ message: "Failed to generate PDF file", error: errorMessage });
  }
});

// =========================================================
// === F√ñLDEL√âSI PDF LET√ñLT√âS - TELJESEN √ÅTDOLGOZOTT VERZI√ì ===
// =========================================================
router.post(
  '/download-grounding-pdf',
  upload.none(), // ‚úÖ Multer middleware - FormData feldolgoz√°s f√°jlok n√©lk√ºl
  async (req, res) => {
    try {
      console.log('‚ö°Ô∏è Received request to generate grounding PDF...');

      // Ellen≈ërizz√ºk, hogy meg√©rkezett-e a f√∂ldel√©si v√°laszok
      const groundingCheckAnswersString = req.body.groundingCheckAnswers;
      if (!groundingCheckAnswersString) {
        return res.status(400).json({ 
          message: 'Hi√°nyz√≥ "groundingCheckAnswers" a k√©r√©sben.' 
        });
      }

      // === √öJ: Egy√©ni sz√∂vegek fogad√°sa ===
      const customTextsString = req.body.customTexts;
      const customTexts = customTextsString ? JSON.parse(customTextsString) : {};
      
      console.log('üìù Custom texts received:', Object.keys(customTexts).length, 'entries');

      // √ñssze√°ll√≠tjuk a service √°ltal v√°rt objektumot a FormData mez≈ëkb≈ël
      const servicePayload = {
        liftId: req.body.liftId || '',
        agency: req.body.agency || '',
        technicianName: req.body.technicianName || '',
        address: req.body.address || '',
        receptionDate: req.body.receptionDate || '',
        signerName: req.body.visum || '', // A t√≠pusban val√≥sz√≠n≈±leg signerName van
        visum: req.body.visum || '',
        signature: req.body.signature || '',
        groundingCheckAnswers: JSON.parse(groundingCheckAnswersString),
        customTexts: customTexts, // ‚úÖ √öJ MEZ≈ê HOZZ√ÅADVA

        // ‚úÖ A T√çPUSHIB√ÅT MEGOLD√ì √öJ SOROK:
        answers: {}, // K√∂telez≈ë, de ehhez a PDF-hez nem kell
        errors: [],  // K√∂telez≈ë, de ehhez a PDF-hez nem kell
        niedervoltMeasurements: [], // K√∂telez≈ë, de ehhez a PDF-hez nem kell
        niedervoltTableMeasurements: {}, // K√∂telez≈ë, de ehhez a PDF-hez nem kell
      };
      
      // Megh√≠vjuk a PDF-kezel≈ë szolg√°ltat√°st
      const pdfBuffer = await GroundingPdfService.generateFilledPdf(servicePayload);

      // F√°jln√©v √∂ssze√°ll√≠t√°sa
      const safeFileName = servicePayload.liftId.replace(/[^a-zA-Z0-9]/g, '_') || 'jegyzokonyv';
      const filename = `Erdungskontrolle_${safeFileName}_${servicePayload.receptionDate || new Date().toISOString().split('T')[0]}.pdf`;

      // Visszak√ºldj√ºk a gener√°lt PDF f√°jlt
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
      res.send(pdfBuffer);
      
      console.log('‚úÖ Grounding PDF successfully generated and sent:', filename);

    } catch (error) {
      console.error('‚ùå Hiba a f√∂ldel√©si PDF gener√°l√°sa k√∂zben:', error);
      
      // R√©szletes hiba√ºzenet fejleszt≈ëi m√≥dban
      const errorMessage = error instanceof Error ? error.message : 'Ismeretlen hiba';
      res.status(500).json({ 
        message: 'Szerverhiba a PDF gener√°l√°sa k√∂zben.',
        error: process.env.NODE_ENV === 'development' ? errorMessage : undefined
      });
    }
  }
);

export { router as protocolMappingRoutes };