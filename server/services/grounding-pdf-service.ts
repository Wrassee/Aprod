// server/services/grounding-pdf-service.ts - V√âGLEGES, JAV√çTOTT √âKEZETKEZEL√âS

import { PDFDocument, PDFTextField, PDFButton } from 'pdf-lib'; // ‚úÖ PDFTextField √©s PDFButton import√°l√°sa
import fontkit from '@pdf-lib/fontkit';
import fs from 'fs';
import path from 'path';
import { groundingPdfMapping } from '../config/grounding-pdf-mapping.js';
import { GroundingAnswer, FormData } from '../../shared/types.js';

export class GroundingPdfService {
  static async generateFilledPdf(formData: FormData): Promise<Buffer> {
    console.log('--- FUT A V√âGLEGES, HELYES √âKEZETKEZEL≈ê K√ìD! v6 ---');
    
    const templatePath = path.resolve(process.cwd(), 'public/templates/Erdungskontrolle.pdf');
    const pdfBytes = fs.readFileSync(templatePath);
    const pdfDoc = await PDFDocument.load(pdfBytes);
    
    // ‚úÖ 1. FONTKIT REGISZTR√ÅL√ÅSA A DOKUMENTUMHOZ
    pdfDoc.registerFontkit(fontkit);

    // ‚úÖ 2. BET≈∞T√çPUS BEOLVAS√ÅSA √âS BE√ÅGYAZ√ÅSA
    const fontPath = path.resolve(process.cwd(), 'public/fonts/Roboto-Regular.ttf');
    const fontBytes = fs.readFileSync(fontPath);
    const robotoFont = await pdfDoc.embedFont(fontBytes);

    const form = pdfDoc.getForm();

    // ‚úÖ 3. AZ √ñSSZES SZ√ñVEGES MEZ≈ê BET≈∞T√çPUS√ÅNAK BE√ÅLL√çT√ÅSA EGYSZERRE
    const fields = form.getFields();
    fields.forEach(field => {
      // Csak a sz√∂veges mez≈ëket m√≥dos√≠tjuk
      if (field instanceof PDFTextField) {
        field.defaultUpdateAppearances(robotoFont);
      }
    });

    // 4. Fejl√©c √©s k√©p mez≈ëk kit√∂lt√©se
    for (const { appDataKey, pdfFieldName } of groundingPdfMapping.metadata) {
      const value = (formData as any)[appDataKey];
      if (value === undefined || value === '') continue;

      // K√úL√ñN LOGIKA AZ AL√Å√çR√ÅS K√âPNEK
      if (appDataKey === 'signature' && typeof value === 'string' && value.startsWith('data:image/png;base64,')) {
    try {
        // 1. K√©p be√°gyaz√°sa
        const pngImage = await pdfDoc.embedPng(value);
        
        // 2. A mez≈ë lek√©r√©se
        const imageField = form.getField(pdfFieldName);
        
        // 3. T√≠pusellen≈ërz√©s
        if (imageField instanceof PDFButton) {
            
            // üí° A HELYES MEGOLD√ÅS:
            // A gomb bels≈ë 'acroField' objektum√°n h√≠vjuk a getWidgets() met√≥dust.
            const widgets = imageField.acroField.getWidgets();

            if (widgets && widgets.length > 0) {
                const { width, height } = widgets[0].getRectangle();
                
                // Ar√°nyos m√©retez√©s (opcion√°lis, de hasznos)
                const scale = Math.min(width / pngImage.width, height / pngImage.height);

                // K√©p be√°ll√≠t√°sa
                imageField.setImage(pngImage);
                console.log(`‚úÖ Signature image set for field: "${pdfFieldName}"`);
            } else {
                console.warn(`‚ö†Ô∏è Nem tal√°lhat√≥ widget a(z) "${pdfFieldName}" mez≈ëh√∂z.`);
            }
        } else {
            console.warn(`‚ö†Ô∏è A(z) "${pdfFieldName}" mez≈ë nem gomb t√≠pus√∫.`);
        }
    } catch (e) {
        console.warn(`‚ö†Ô∏è Hiba az al√°√≠r√°sk√©p beilleszt√©sekor a(z) '${pdfFieldName}' mez≈ëbe:`, e);
    }
} 
      // A T√ñBBI SZ√ñVEGES MEZ≈ê
      else {
        try {
          // ‚úÖ Vissza√°ll√≠tva egy argumentumra! A bet≈±t√≠pust m√°r fent be√°ll√≠tottuk.
          form.getTextField(pdfFieldName).setText(String(value));
        } catch {
          console.warn(`‚ö†Ô∏è Sz√∂veges mez≈ë nem tal√°lhat√≥ vagy nem kompatibilis: "${pdfFieldName}"`);
        }
      }
    }

    // === EGY√âNI SZ√ñVEGEK BE√çR√ÅSA A PDF-BE ===
    if (formData.customGroundingTexts) {
      console.log('üìù Processing custom texts...');
      for (const [pdfFieldName, textValue] of Object.entries(formData.customGroundingTexts)) {
        // Csak akkor √≠runk, ha van sz√∂veg
        if (textValue && typeof textValue === 'string') {
          try {
            const field = form.getTextField(pdfFieldName);
            field.setText(textValue);
            console.log(`‚úÖ Custom text written to field "${pdfFieldName}": ${textValue}`);
          } catch {
            console.warn(`‚ö†Ô∏è Egy√©ni sz√∂vegmez≈ë nem tal√°lhat√≥: "${pdfFieldName}"`);
          }
        }
      }
    }

    // 5. Hib√°s v√°laszok √∂sszegy≈±jt√©se
    const remarks: { punkt: string; bemerkung: string }[] = [];
    groundingPdfMapping.answers.forEach(({ questionId, okFieldName, notOkFieldName }) => {
      const answer = formData.groundingCheckAnswers?.[questionId];
      if (!answer) return;
      try {
        if (answer === 'ok') {
          form.getTextField(okFieldName).setText('X');
        } else if (answer === 'not_ok') {
          form.getTextField(notOkFieldName).setText('X');
          const punkt = okFieldName.replace('OK', '');
          remarks.push({ punkt, bemerkung: `Hiba a ${punkt} pontn√°l.` });
        } else if (answer === 'not_applicable') {
          form.getTextField(okFieldName).setText('-');
        }
      } catch (e) { 
        console.warn(`‚ö†Ô∏è Hiba a(z) ${questionId} v√°lasz be√≠r√°sakor.`);
      }
    });

    // 6. Bemerkung mez≈ëk kit√∂lt√©se - INTELLIGENS LOGIKA
    // Els≈ë hiba be√≠r√°sa (ha van)
    if (remarks.length >= 1) {
      try {
        const row1 = groundingPdfMapping.remarks[0];
        const punktField1 = form.getTextField(row1.punktField);
        punktField1.setText(remarks[0].punkt);
        punktField1.updateAppearances(robotoFont);

        const bemerkungField1 = form.getTextField(row1.bemerkungField);
        bemerkungField1.setText(remarks[0].bemerkung);
        bemerkungField1.updateAppearances(robotoFont);
      } catch (e) { console.warn(`‚ö†Ô∏è Hiba a Bemerkung 1. sor be√≠r√°sakor.`); }
    }

    // M√°sodik sor tartalm√°nak eld√∂nt√©se
    if (remarks.length >= 2) {
      try {
        const row2 = groundingPdfMapping.remarks[1];
        let punktText = '';
        let bemerkungText = '';

        if (remarks.length > 2) {
          // Ha T√ñBB MINT 2 hiba van, ide az √ºzenet ker√ºl
          bemerkungText = "A tov√°bbi hib√°kat keresd a k√∂z√∂s hibalist√°ban";
        } else {
          // Ha PONTOSAN 2 hiba van, ide a m√°sodik hiba ker√ºl
          punktText = remarks[1].punkt;
          bemerkungText = remarks[1].bemerkung;
        }

        const punktField2 = form.getTextField(row2.punktField);
        punktField2.setText(punktText);
        punktField2.updateAppearances(robotoFont);

        const bemerkungField2 = form.getTextField(row2.bemerkungField);
        bemerkungField2.setText(bemerkungText);
        bemerkungField2.updateAppearances(robotoFont);
      } catch (e) { console.warn(`‚ö†Ô∏è Hiba a Bemerkung 2. sor be√≠r√°sakor.`); }
    }
    
    // 7. PDF Kilap√≠t√°sa (Ez "r√°√©geti" a k√©pet a gombra a helyes m√©retben)
    form.flatten();

    // 8. PDF Ment√©se
    const filledPdfBytes = await pdfDoc.save();
    return Buffer.from(filledPdfBytes);
  }
}